//------------------------------------------------
//--- 010 Editor v7.0.2 Binary Template
//
//      File: nud
//   Authors: Zarklord & smb123win64gb & rtb
//   Version: 0.1
//   Purpose: model file
//  Category: 3d
//  ID ubytes: 4E 44 50 33
//------------------------------------------------
local int i,materialCheck,j;
local int objCount,currentPoly = 0;
local int check = 0;
local int totalExtraLayers;
local int polyClumpStartPoint;
local int vertexClumpStartPoint;
local int vertexAddClumpStartPoint;
local int nameClumpStart;
local char skip = 'F';
struct FILE{
    struct HEADER{
        char header[4];
        uint32 fileSize;
        uint16 magic1;
        uint16 numOfPolys;
        uint16 magic2;
        uint16 numOfBones;
        uint32 polyClumpStart;
        polyClumpStartPoint = polyClumpStart + 0x30;
        uint32 polyClumpSize;
        vertexClumpStartPoint = polyClumpStartPoint + polyClumpSize;
        uint32 vertexClumpSize;
        vertexAddClumpStartPoint = vertexClumpStartPoint + vertexClumpSize;
        uint32 vertexAddClumpSize;
        nameClumpStart = vertexAddClumpStartPoint + vertexAddClumpSize;
        //padding
        FSkip(0x10);
    }header<bgcolor=cYellow>;
    struct POLYSETS{
        struct POLYSET{
            //padding
            FSkip(0x20);
            uint32 stringNameOffset;
            uint32 four;
            uint16 OxFFFF;
            uint16 numOfSubPolys;
            uint32 startPosForNext;
            objCount += numOfSubPolys;
        }polyset[header.numOfPolys]<bgcolor=cBlue,optimize=false>;
    }polysets;

    local int vertStart[objCount];
    local int polygonStart[objCount];
    local int vertAddStart[objCount];
    local int vertAmount[objCount];
    local int polygonAmount[objCount];
    local int vertSize[objCount];
    local int UVSizes[objCount];
    local int polygonSize[objCount];
    local int texProp1Start[objCount];
    local int texProp2Start[objCount];
    local int texProp3Start[objCount];
    local int texProp4Start[objCount];
    local int polyNameStart[objCount];
    local int materialCount1[objCount] = 0;
    local int materialCount2[objCount] = 0;
    local int materialCount3[objCount] = 0;
    local int materialCount4[objCount] = 0;
    
    local int temp = 0;
    for(i=0;i<header.numOfPolys;i++){
        for(j=0;j<polysets.polyset[i].numOfSubPolys;j++){
            polyNameStart[temp] = polysets.polyset[i].stringNameOffset;
            temp++;
        }
    }
    
    struct OBJPROPS{
        struct OBJPROP{
            uint32 polyStart;
            uint32 vertexStart;
            uint32 vertexAddStart;
            uint16 vertexAmount;
            ubyte vertexSize;
            ubyte UVSize;
            uint32 texProp1;
            uint32 texProp2;
            uint32 texProp3;
            uint32 texProp4;
            uint16 polyAmount;
            ubyte polySize;
            ubyte polyFlag;
            //padding
            FSkip(0x0C);
            if(texProp4 != 0){
                totalExtraLayers += 3;
            } else if(texProp3 != 0){
                totalExtraLayers += 2;
            } else if(texProp2 != 0){
                totalExtraLayers += 1;
            }
            //append to arrays
            vertStart[currentPoly] = vertexStart + vertexClumpStartPoint;
            polygonStart[currentPoly] = polyStart + polyClumpStartPoint;
            vertAddStart[currentPoly] = vertexAddStart + vertexAddClumpStartPoint;
            vertAmount[currentPoly] = vertexAmount;
            polygonAmount[currentPoly] = polyAmount;
            vertSize[currentPoly] = vertexSize;
            UVSizes[currentPoly] = UVSize;
            polygonSize[currentPoly] = polySize;
            texProp1Start[currentPoly] = texProp1;
            texProp2Start[currentPoly] = texProp2;
            texProp3Start[currentPoly] = texProp3;
            texProp4Start[currentPoly] = texProp4;
            currentPoly += 1;
        }objprop[objCount]<optimize=false>;
    }objprops<bgcolor=cPurple>;

    struct MATERIAL (int objNum,int texPropNum){
        //start of materialProp
        while(check == 0) {
            struct MATERIALS{
                uint32 isLast;
                uint32 stringOffset;
                uint32 numberOfFloats;
                //padding or unk?
                FSkip(4);
                float materialValue[numberOfFloats];
                materialCheck = isLast;
            }materials<optimize=false>;
            if(texPropNum == 1){
                materialCount1[objNum] += 1;
            }else if(texPropNum == 2){
                materialCount2[objNum] += 1;
            }else if(texPropNum == 3){
                materialCount3[objNum] += 1;
            }else if(texPropNum == 4){
                materialCount4[objNum] += 1;
            }
            if(materialCheck == 0){
                check = 1;
            }
        }
        check = 0;
        while(ReadInt() == 0) {
            FSkip(4);
        }
    };

    struct MATDATA (int objNum,int texPropNum){
        //materialFlags
        //first 4 bits = Material Type
        //next 4 bits = ?????
        ubyte matData <format=hex>;
        ubyte fog <format=hex>;
        ubyte texLayers <format=hex>;
        ubyte materialEffects <format=hex>;
        //padding or unk?
        FSkip(5);
        //transparency section
        uint16 firstTransparencySection <format=hex>;
        ubyte texCount;
        uint32 secondTransparencySection <format=hex>;
        //rest of mat flags
        uint16 drawPriority;
        ubyte cullMode <format=hex>;
        //???
        FSkip(1);
        //padding or unk?
        FSkip(4);
        //maybe used for watery effect?
        uint32 unk1 <format=hex>;
        //padding or unk?
        FSkip(4);
        struct TEXTUREDATA{
            //start of textureid data
            ubyte baseID;
            ubyte groupID;
            ubyte subgroupID;
            ubyte textureID;
            //padding or unk?
            FSkip(6);
            uint16 firstLayerMapMode <format=hex>;
            uint16 wrapMode <format=hex>;
            ubyte minFilter <format=hex>;
            ubyte magFilter <format=hex>;
            //???
            FSkip(1);
            //???
            FSkip(1);
            //padding or unk?
            FSkip(6);
        }texturedata[texCount];
        MATERIAL material(objNum,texPropNum);
    };

    struct MATDATAS{
        for(i=0;i<objCount;i++){
            if(texProp1Start[i] != 0) {
                MATDATA matDataLayer1(i,1) <optimize=false>;
            }
            if(texProp2Start[i] != 0) {
                MATDATA matDataLayer2(i,2) <optimize=false>;
            }
            if(texProp3Start[i] != 0) {
                MATDATA matDataLayer3(i,3) <optimize=false>;
            }
            if(texProp4Start[i] != 0) {
                MATDATA matDataLayer4(i,4) <optimize=false>;
            }
        }
    }matdatas<bgcolor=cGreen>;

    struct UVS (int i){
        if(skip != 'F'){
            if(UVSizes[i] == 0x10){
                for(j=0;j<vertAmount[i];j++){
                    struct UVS10{
                        hfloat tu;
                        hfloat tv;
                    }uvs10;
                }
            }
        }
        if(UVSizes[i] == 0x12){
            for(j=0;j<vertAmount[i];j++){
                struct UVS12{
                    ubyte colorR;
                    ubyte colorG;
                    ubyte colorB;
                    ubyte colorA;
                    hfloat tu;
                    hfloat tv;
                }uvs12;
            }
        } else if(UVSizes[i] == 0x22){
            for(j=0;j<vertAmount[i];j++){
                struct UVS22{
                    ubyte colorR;
                    ubyte colorG;
                    ubyte colorB;
                    ubyte colorA;
                    hfloat tu;
                    hfloat tv;
                    hfloat tu2;
                    hfloat tv2;
                }uvs22;
            }
        } else if(UVSizes[i] == 0x32){
            for(j=0;j<vertAmount[i];j++){
                struct UVS32{
                    ubyte colorR;
                    ubyte colorG;
                    ubyte colorB;
                    ubyte colorA;
                    hfloat tu;
                    hfloat tv;
                    hfloat tu2;
                    hfloat tv2;
                    hfloat tu3;
                    hfloat tv3;
                }uvs32;
            }
        } else if(UVSizes[i] == 0x42){
            for(j=0;j<vertAmount[i];j++){
                struct UVS42{
                    ubyte colorR;
                    ubyte colorG;
                    ubyte colorB;
                    ubyte colorA;
                    hfloat tu;
                    hfloat tv;
                    hfloat tu2;
                    hfloat tv2;
                    hfloat tu3;
                    hfloat tv3;
                    hfloat tu4;
                    hfloat tv4;
                }uvs42;
            }
        }
    };
    
    FSeek(vertexClumpStartPoint);
    struct VERTS{
        for(i=0;i<objCount;i++){
            FSeek(vertStart[i]);
            struct VERTCLUMP{
                if(vertSize[i] == 0x00) {
                    struct VERTTYPE00{
                        for(j=0;j<vertAmount[i];j++){
                            struct VERTSET00{
                                float vx;
                                float vy;
                                float vz;
                                float vq;
                                if(UVSizes[i] == 0x12 || UVSizes[i] == 0x22 || UVSizes[i] == 0x32 || UVSizes[i] == 0x42){
                                    ubyte colorR;
                                    ubyte colorG;
                                    ubyte colorB;
                                    ubyte colorA;
                                }
                                hfloat tu;
                                hfloat tv;
                                if(UVSizes[i] >= 0x20){
                                    hfloat tu2;
                                    hfloat tv2;
                                }
                                if(UVSizes[i] >= 0x30){
                                    hfloat tu3;
                                    hfloat tv3;
                                }
                                if(UVSizes[i] >= 0x40){
                                    hfloat tu4;
                                    hfloat tv4;
                                }
                            }vertset00;
                        }
                    }vertype00;
                }
                if(vertSize[i] == 0x06) {
                    struct VERTTYPE06{
                        for(j=0;j<vertAmount[i];j++){
                            struct VERTSET06{
                                float vx;
                                float vy;
                                float vz;
                                hfloat nx;
                                hfloat ny;
                                hfloat nz;
                                hfloat nq;
                                if(UVSizes[i] == 0x12 || UVSizes[i] == 0x22 || UVSizes[i] == 0x32 || UVSizes[i] == 0x42){
                                    ubyte colorR;
                                    ubyte colorG;
                                    ubyte colorB;
                                    ubyte colorA;
                                }
                                hfloat tu;
                                hfloat tv;
                                if(UVSizes[i] >= 0x20){
                                    hfloat tu2;
                                    hfloat tv2;
                                }
                                if(UVSizes[i] >= 0x30){
                                    hfloat tu3;
                                    hfloat tv3;
                                }
                                if(UVSizes[i] >= 0x40){
                                    hfloat tu4;
                                    hfloat tv4;
                                }
                            }vertset06;
                        }
                    }verttype06;
                }
                if(vertSize[i] == 0x07) {
                    struct VERTTYPE07{
                        for(j=0;j<vertAmount[i];j++){
                            struct VERTSET07{
                                float vx;
                                float vy;
                                float vz;
                                hfloat nx;
                                hfloat ny;
                                hfloat nz;
                                hfloat nq;
                                hfloat bnx;
                                hfloat bny;
                                hfloat bnz;
                                hfloat bnq;
                                hfloat tanx;
                                hfloat tany;
                                hfloat tanz;
                                hfloat tanq;
                                if(UVSizes[i] == 0x12 || UVSizes[i] == 0x22 || UVSizes[i] == 0x32 || UVSizes[i] == 0x42){
                                    ubyte colorR;
                                    ubyte colorG;
                                    ubyte colorB;
                                    ubyte colorA;
                                }
                                hfloat tu;
                                hfloat tv;
                                if(UVSizes[i] >= 0x20){
                                    hfloat tu2;
                                    hfloat tv2;
                                }
                                if(UVSizes[i] >= 0x30){
                                    hfloat tu3;
                                    hfloat tv3;
                                }
                                if(UVSizes[i] >= 0x40){
                                    hfloat tu4;
                                    hfloat tv4;
                                }
                            }vertset07;
                        }
                    }verttype07;
                }
                if(vertSize[i] == 0x08) {
                    struct VERTTYPE08{
                        for(j=0;j<vertAmount[i];j++){
                            struct VERTSET08{
                                hfloat nx;
                                hfloat ny;
                                hfloat nz;
                                hfloat nq;
                                hfloat unk1;
                                hfloat unk2;
                                hfloat unk3;
                                hfloat unk4;
                                hfloat unk5;
                                if(UVSizes[i] == 0x12 || UVSizes[i] == 0x22 || UVSizes[i] == 0x32 || UVSizes[i] == 0x42){
                                    ubyte colorR;
                                    ubyte colorG;
                                    ubyte colorB;
                                    ubyte colorA;
                                }
                                hfloat tu;
                                hfloat tv;
                                if(UVSizes[i] >= 0x20){
                                    hfloat tu2;
                                    hfloat tv2;
                                }
                                if(UVSizes[i] >= 0x30){
                                    hfloat tu3;
                                    hfloat tv3;
                                }
                                if(UVSizes[i] >= 0x40){
                                    hfloat tu4;
                                    hfloat tv4;
                                }
                            }vertset08;
                        }
                    }verttype08;
                }
                if(vertSize[i] == 0x11) {
                    struct VERTTYPE11{
                        UVS uvs(i);
                        FSeek(vertAddStart[i]);
                        struct VERTADDCLUMP11{
                            for(j=0;j<vertAmount[i];j++){
                                struct VERTADD11{
                                    float vx;
                                    float vy;
                                    float vz;
                                    float nx;
                                    float ny;
                                    float nz;
                                    float nq;
                                    float nr;
                                    float bone1;
                                    float bone2;
                                    float bone3;
                                    float bone4;
                                    float weight1;
                                    float weight2;
                                    float weight3;
                                    float weight4;
                                }vertadd11;
                            }
                        }vertaddclump11;
                    }verttype11;
                }
                if(vertSize[i] == 0x13) {
                    struct VERTTYPE13{
                        UVS uvs(i);
                        FSeek(vertAddStart[i]);
                        struct VERTADDCLUMP13{
                            for(j=0;j<vertAmount[i];j++){
                                struct VERTADD13{
                                    float vx;
                                    float vy;
                                    float vz;
                                    float vq;
                                    float nx;
                                    float ny;
                                    float nz;
                                    float nq;
                                    float bnx;
                                    float bny;
                                    float bnz;
                                    float bnq;
                                    float tanx;
                                    float tany;
                                    float tanz;
                                    float tanq;
                                    float bone1;
                                    float bone2;
                                    float bone3;
                                    float bone4;
                                    float weight1;
                                    float weight2;
                                    float weight3;
                                    float weight4;
                                }vertadd13;
                            }
                        }vertaddclump13;
                    }verttype13;
                }
                if(vertSize[i] == 0x40) {
                    struct VERTTYPE40{
                        skip = 'T';
                        UVS uvs(i);
                        skip = 'F';
                        FSeek(vertAddStart[i]);
                        struct VERTADDCLUMP40{
                            for(j=0;j<vertAmount[i];j++){
                                struct VERTADD40{
                                    float vx;
                                    float vy;
                                    float vz;
                                    float floatyval;
                                    ubyte bone1;
                                    ubyte bone2;
                                    ubyte bone3;
                                    ubyte bone4;
                                    ubyte weight1;
                                    ubyte weight2;
                                    ubyte weight3;
                                    ubyte weight4;
                                }vertadd40;
                            }
                        }vertaddclump40;
                    }verttype40;
                }
                if(vertSize[i] == 0x46) {
                    struct VERTTYPE46{
                        UVS uvs(i);
                        FSeek(vertAddStart[i]);
                        struct VERTADDCLUMP46{
                            for(j=0;j<vertAmount[i];j++){
                                struct VERTADD46{
                                    float vx;
                                    float vy;
                                    float vz;
                                    hfloat nx;
                                    hfloat ny;
                                    hfloat nz;
                                    hfloat nq;
                                    ubyte bone1;
                                    ubyte bone2;
                                    ubyte bone3;
                                    ubyte bone4;
                                    ubyte weight1;
                                    ubyte weight2;
                                    ubyte weight3;
                                    ubyte weight4;
                                }vertadd46;
                            }
                        }vertaddclump46;
                    }verttype46;
                }
                if(vertSize[i] == 0x47) {
                    struct VERTTYPE47{
                        UVS uvs(i);
                        FSeek(vertAddStart[i]);
                        struct VERTADDCLUMP47{
                            for(j=0;j<vertAmount[i];j++){
                                struct VERTADD47{
                                    float vx;
                                    float vy;
                                    float vz;
                                    hfloat nx;
                                    hfloat ny;
                                    hfloat nz;
                                    hfloat nq;
                                    hfloat bnx;
                                    hfloat bny;
                                    hfloat bnz;
                                    hfloat bnq;
                                    hfloat tanx;
                                    hfloat tany;
                                    hfloat tanz;
                                    hfloat tanq;
                                    ubyte bone1;
                                    ubyte bone2;
                                    ubyte bone3;
                                    ubyte bone4;
                                    ubyte weight1;
                                    ubyte weight2;
                                    ubyte weight3;
                                    ubyte weight4;
                                }vertadd47;
                            }
                        }vertaddclump47;
                    }verttype47;
                }
            }vertclump;
        }
    }verts<bgcolor=cRed>;
    

    local int verStart;
    FSeek(polyClumpStartPoint);
    struct POLYS{
        for(i=0;i<objCount;i++){
            FSeek(polygonStart[i]);
            verStart = (polygonAmount[i] * 2) + FTell();
            struct POLYCLUMP{
                if(polygonSize[i] == 0x00) {
                    struct POLYSET00{
                        short f1;
                        short f2;
                        while(FTell() != verStart){
                            struct POLYSETS00{
                                short f3;
                                if(f3 == 0xFFFF){
                                    short f1;
                                    short f2;
                                }
                            }polysets00;
                        }
                    }polyset00;
                }
                if(polygonSize[i] == 0x40) {
                    struct POLYSET40{
                        for(j=0;j<(polygonAmount[i]/3);j++){
                            short fa;
                            short fb;
                            short fc;
                        }
                    }polyset00;
                }
            }polyclump;
        }
    }polys<bgcolor=cAqua>;

    FSeek(nameClumpStart);
    struct POLYNAMES{
        for(i=0;i<objCount;i++){
            FSeek(nameClumpStart + polyNameStart[i]);
            struct POLYNAME{
                char name[ReadStringLength(FTell()) - 1];
            }polyname;
        }
    }meshnames<bgcolor=cSilver>;
    endLine();
    struct MATNAMES{
        for(i=0;i<objCount;i++){
            struct OBJMATS{
                for(j=0;j<materialCount1[i];j++) {
                    struct MATNAME1{
                        char name[ReadStringLength(FTell()) - 1];
                    }matname;
                    endLine();
                }
                for(j=0;j<materialCount2[i];j++) {
                    struct MATNAME2{
                        char name[ReadStringLength(FTell()) - 1];
                    }matname;
                    endLine();
                }
                for(j=0;j<materialCount3[i];j++) {
                    struct MATNAME3{
                        char name[ReadStringLength(FTell()) - 1];
                    }matname;
                    endLine();
                }
                for(j=0;j<materialCount4[i];j++) {
                    struct MATNAME4{
                        char name[ReadStringLength(FTell()) - 1];
                    }matname;
                    endLine();
                }
            }objmats;
        }
    }matnames<bgcolor=cSilver>;
}file;

void endLine() {
    if(FTell() % 0x10 == 0){
        FSkip(0x10);
        return;
    }
    while(FTell() % 0x10 != 0){
        FSkip(1);
    }
}